  newTalent{
	name = "Wormhole",
	type = {"chronomancy/weaving", 2},
	require = temporal_req2,
	points = 5,
	random_ego = "utility",
	paradox = 15,
	cooldown = 30,
	tactical = {
		ESCAPE = 4,
	},
	requires_target = function(self, t) return self:getTalentLevel(t) >= 4 end,
	action = function(self, t)
		-- Finding the exit location
		-- First, find the center possible exit locations
		local x, y, radius
		if self:getTalentLevel(t) >= 4 then
			radius = 7 - self:getTalentLevel(t)
			local tg = {type="ball", nolock=true, pass_terrain=true, nowarning=true, range=10 + self:combatSpellpower(0.1), radius=radius}
			x, y = self:getTarget(tg)
			if not x then return nil end
			-- See if we can actually project to the selected location
			if not self:canProject(tg, x, y) then
				game.logPlayer(self, "Pick a valid location")
				return false
			end
		else
			x, y = self.x, self.y
			radius = 25
		end
		-- Second, select one of the possible exit locations
		local poss = {}
			for i = x - radius, x + radius do
				for i = x - math.floor(radius), x + math.floor(radius) do
					for j = y - radius, y + radius do
						if game.level.map:isBound(i, j) and
							core.fov.distance(x, y, i, j) <= radius and
							self:canMove(i, j) then
							poss[#poss+1] = {i,j}
						end
					end
				end
			end
			if #poss == 0 then return false end
			local pos = poss[rng.range(1, #poss)]
			x, y = pos[1], pos[2]
		-- Adding the entrance wormhole
		local entrance = mod.class.Object.new{
			old_feat = game.level.map(self.x, self.y, Map.TERRAIN),
			name = "wormhole", image = "terrain/wormhole.png",
			display = '&', color_r=255, color_g=255, color_b=255, back_color=colors.STEEL_BLUE,
			always_remember = true,
			temporary = (2 + self:combatSpellpower(0.03) * self:getTalentLevel(t) * getParadoxModifier(self, pm)),
			x = self.x, y = self.y,
			canAct = false,
			act = function(self)
			self:useEnergy()
			self.temporary = self.temporary - 1
				if self.temporary <= 0 then
					game.level.map(self.x, self.y, Map.TERRAIN, self.old_feat)
					game.level:removeEntity(self)
					game.level.map:redisplay()
				end
			end,
			summoner_gain_exp = true,
			summoner = self,
		}
		game.level:addEntity(entrance)
		game.level.map(self.x, self.y, Map.TERRAIN, entrance)
		game.level.map:particleEmitter(self.x, self.y, 1, "teleport")
		-- Adding the exit wormhole
		local exit = entrance:clone()
		exit.old_feat = game.level.map(x, y, Map.TERRAIN)
		exit.x = x
		exit.y = y
		game.level:addEntity(exit)
		game.level.map(x, y, Map.TERRAIN, exit)
		game.level.map:particleEmitter(x, y, 1, "teleport")
		-- Linking the wormholes
		entrance.dest = exit
		exit.dest = entrance
		game.logSeen(self, "%s tears a hole in the spacetime continuum!", self.name)
		return true
	end,
	info = function(self, t)
		return ([[Creates a wormhole between yourself and a random location within a range of (%d) and pulls you through.
		At level 4 it allows you to choose the target area (radius %d).
		The wormhole lasts %d turns and may be used to move back and forth between the entrance and exit by pressing '>' (default).]])
		:format(10 + self:getTalentLevel(t), 7 - self:getTalentLevel(t), 2 + self:combatSpellpower(0.03) * self:getTalentLevel(t))
	end,
}